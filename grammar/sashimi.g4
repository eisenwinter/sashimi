grammar Sashimi;

key_value_pair : IDENT EQ IDENT;
key_atom : ATOM IDENT;
constraint_list: HLPAREN (key_atom | key_value_pair) (SEPERATOR (key_atom | key_value_pair))* HRPAREN;
union_decl : UNION LPAREN ALIAS (SEPERATOR ALIAS)* RPAREN;
type_decl : TYPE ( constraint_list )?;
entity_ref: ENTITY IDENT;
list_decl : LIST (type_decl | entity_ref);
type_def : list_decl | union_decl | type_decl | entity_ref;
alias_decl : AS ALIAS;
type_is : IS type_def;
prop_decl : PROP_START IDENT alias_decl? type_is;
command_call : COMMAND LPAREN IDENT(DOT IDENT)* RPAREN;
entity_def :  ENTITY LPAREN IDENT RPAREN OF prop_decl (prop_decl)*;
export : DIRECTIVE (command_call | entity_def);
block : export export*;

DIRECTIVE : 'sashimi:';
COMMAND : 'display' | 'repeat' | 'layout_section' | 'layout' | 'link';
ENTITY: 'entity';
SEPERATOR : ',';
PROP_START: '-';
OF : 'of';
IS : 'is';
AS : 'as';
LPAREN : '(';
RPAREN : ')';
HLPAREN : '[';
HRPAREN : ']';
EQ : '=';
ATOM : ':';
DOT : '.';
TYPE : 'text' | 'picture' | 'number' | 'bool';
UNION : 'manyOf' | 'oneOf';
LIST : 'list';
ALIAS : '"' ~["\r\n]* '"';
IDENT : [a-zA-Z0-9_]+;

WS : [ \t\r\n]+ -> skip;
