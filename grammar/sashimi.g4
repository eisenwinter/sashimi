grammar Sashimi;

keyValuePair : IDENT EQ IDENT;
keyAtom : ATOM IDENT;
constraintList: HLPAREN (keyAtom | keyValuePair) (SEPERATOR (keyAtom | keyValuePair))* HRPAREN;
unionDecl : UNION LPAREN ALIAS (SEPERATOR ALIAS)* RPAREN;
typeDecl : TYPE ( constraintList )?;
entityRef: ENTITY IDENT;
listDecl : LIST (typeDecl | entityRef);
typeDef : listDecl | unionDecl | typeDecl | entityRef;
aliasDecl : AS ALIAS;
typeIs : IS typeDef;
propDecl : PROP_START IDENT aliasDecl? typeIs;
commandCall : COMMAND LPAREN IDENT(DOT IDENT)* RPAREN;
entityDef :  ENTITY LPAREN IDENT RPAREN OF propDecl (propDecl)*;
export : DIRECTIVE (commandCall | entityDef);
block : export export* EOF;

DIRECTIVE : 'sashimi:';
COMMAND : 'display' | 'repeat' | 'layout_section' | 'layout' | 'link';
ENTITY: 'entity';
SEPERATOR : ',';
PROP_START: '-';
OF : 'of';
IS : 'is';
AS : 'as';
LPAREN : '(';
RPAREN : ')';
HLPAREN : '[';
HRPAREN : ']';
EQ : '=';
ATOM : ':';
DOT : '.';
TYPE : 'text' | 'picture' | 'number' | 'bool';
UNION : 'manyOf' | 'oneOf';
LIST : 'list';
ALIAS : '"' ~["\r\n]* '"';
IDENT : [a-zA-Z0-9_]+;

WS : [ \t\r\n]+ -> skip;
